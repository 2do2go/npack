#!/usr/bin/env node

'use strict';

var program = require('commander'),
	npack = require('../lib/npack'),
	packageJson = require('../package.json'),
	_ = require('underscore'),
	Steppy = require('twostep').Steppy,
	colors = require('colors/safe'),
	read = require('read'),
	processUtils = require('../lib/utils/process'),
	path = require('path');

var createErrorLogger = function(options) {
	return function(err) {
		if (err) {
			if (options.trace) {
				console.error(colors.red(err.stack));
			} else {
				console.error(colors.red('Error: %s'), err.message);
			}
		}
	};
};

var printPkgInfo = function(pkgInfo, options) {
	options = _({}).defaults(options, {
		markCurrent: false,
		spaces: 2
	});

	var spacesStr = (new Array(options.spaces + 1)).join(' ');

	if (options.markCurrent && pkgInfo.current) {
		console.log(
			colors.green('%sname:        %s [*current]'),
			spacesStr,
			pkgInfo.name
		);
	} else {
		console.log('%sname:        %s', spacesStr, pkgInfo.name);
	}

	console.log('%spath:        %s', spacesStr, pkgInfo.path);

	if (pkgInfo.npm) {
		console.log('%snpm name:    %s', spacesStr, pkgInfo.npm.name);
		console.log('%snpm version: %s', spacesStr, pkgInfo.npm.version);
	}

	if (!_(pkgInfo.hooks).isEmpty()) {
		console.log('%shooks:', spacesStr);

		_(pkgInfo.hooks).each(function(action, hook) {
			console.log('%s  %s: %s', spacesStr, hook, action);
		});
	}

	if (!_(pkgInfo.scripts).isEmpty()) {
		console.log('%sscripts: %s', spacesStr, _(pkgInfo.scripts).keys().join(', '));
	}
};

var printPkgsList = function(options) {
	Steppy(
		function() {
			npack.getList({dir: process.cwd()}, this.slot());
		},
		function(err, pkgInfos) {
			if (!pkgInfos.length) throw new Error('Installed packages are not found');

			console.log('Installed packages:');

			_(pkgInfos).each(function(pkgInfo, index) {
				if (options.info && index ) console.log('');

				var str = '  ' + pkgInfo.name;

				if (pkgInfo.npm) {
					str += ' (' + pkgInfo.npm.name + ' ' + pkgInfo.npm.version + ')';
				}

				if (pkgInfo.current) {
					str += ' [*current]';

					str = colors.green(str);
				}

				console.log(str);

				if (options.info) {
					printPkgInfo(pkgInfo, {spaces: 4});
				}
			});

			this.pass(null);
		},
		createErrorLogger(options.parent)
	);
};

program
	.version(packageJson.version)
	.option('--trace', 'Show stack trace on error');

program.command('install <source>')
	.alias('i')
	.description('Install new package')
	.option(
		'-u, --user <USER[:PASSWORD]>',
		'User for basic authentication, PASSWORD will be promted if omitted'
	)
	.option(
		'-f, --force',
		'Install package even if such version is already installed'
	)
	.option('-l, --log', 'Show detailed log')
	.action(function(src, options) {
		Steppy(
			function() {
				if (options.user && options.user.indexOf(':') === -1) {
					read({
						prompt: 'Enter password for user "' + options.user + '":',
						silent: true
					}, this.slot());
				} else {
					this.pass(null);
				}
			},
			function(err, password) {
				var installOptions = _(options)
					.chain()
					.pick('force', 'log')
					.extend({
						src: src,
						dir: process.cwd()
					})
					.value();

				if (options.user) {
					var auth = options.user + (password !== null ? (':' + password) : '');
					installOptions.auth = auth;
				}

				console.log('Install new package from "%s"', src);

				npack.install(installOptions, this.slot());
			},
			function(err, pkgInfo) {
				console.log(colors.green('Done'));

				console.log('\nInstalled package info:');
				printPkgInfo(pkgInfo, {markCurrent: true});

				this.pass(null);
			},
			createErrorLogger(options.parent)
		);
	});

program.command('list')
	.alias('ls')
	.description('Print list of installed packages')
	.option('-i, --info', 'Show extended info about each package')
	.action(printPkgsList);

program.command('ll')
	.description('Print list with extended info, alias for "ls -i"')
	.action(function(options) {
		printPkgsList(_({info: true}).extend(options));
	});

program.command('current')
	.alias('cur')
	.description('Print info about current package')
	.action(function(options) {
		Steppy(
			function() {
				npack.getCurrentInfo({dir: process.cwd()}, this.slot());
			},
			function(err, pkgInfo) {
				if (!pkgInfo) throw new Error('Current package is not set');

				console.log('Current package info:');

				printPkgInfo(pkgInfo);

				this.pass(null);
			},
			createErrorLogger(options.parent)
		);
	});

program.command('info <package>')
	.description('Print info about intalled package')
	.action(function(name, options) {
		Steppy(
			function() {
				npack.getInfo({
					name: name,
					dir: process.cwd()
				}, this.slot());
			},
			function(err, pkgInfo) {
				if (!pkgInfo) throw new Error('Package "' + name + '" is not found');

				console.log('Package info:');

				printPkgInfo(pkgInfo, {markCurrent: true});

				this.pass(null);
			},
			createErrorLogger(options.parent)
		);
	});

program.command('use <package>')
	.description('Set package as current')
	.option('-l, --log', 'Show detailed log')
	.action(function(name, options) {
		Steppy(
			function() {
				console.log('Set package "%s" as current', name);

				var useOptions = _(options)
					.chain()
					.pick('log')
					.extend({
						name: name,
						dir: process.cwd()
					})
					.value();

				npack.use(useOptions, this.slot());
			},
			function() {
				console.log(colors.green('Done'));

				this.pass(null);
			},
			createErrorLogger(options.parent)
		);
	});

program.command('uninstall <package>')
	.alias('remove')
	.alias('rm')
	.description('Uninstall package')
	.option('-l, --log', 'Show detailed log')
	.action(function(name, options) {
		Steppy(
			function() {
				console.log('Uninstall package "%s"', name);

				var uninstallOptions = _(options)
					.chain()
					.pick('log')
					.extend({
						name: name,
						dir: process.cwd()
					})
					.value();

				npack.uninstall(uninstallOptions, this.slot());
			},
			function() {
				console.log(colors.green('Done'));

				this.pass(null);
			},
			createErrorLogger(options.parent)
		);
	});

program.command('clean')
	.description('Uninstall all packages except current')
	.option('-l, --log', 'Show detailed log')
	.action(function(options) {
		Steppy(
			function() {
				console.log('Clean inactive packages');

				var cleanOptions = _(options)
					.chain()
					.pick('log')
					.extend({dir: process.cwd()})
					.value();

				npack.clean(cleanOptions, this.slot());
			},
			function() {
				console.log(colors.green('Done'));

				this.pass(null);
			},
			createErrorLogger(options.parent)
		);
	});

program.command('run [script] [args...]')
	.description('Execute "npm run" task from current package')
	.action(function(script, args, options) {
		Steppy(
			function() {
				npack.getCurrentInfo({dir: process.cwd()}, this.slot());
			},
			function(err, pkgInfo) {
				if (!pkgInfo) throw new Error('Current package is not set');

				if (!script) {
					if (_(pkgInfo.scripts).isEmpty()) {
						throw new Error('Scripts list is not found');
					} else {
						console.log('Scripts list for current package:');

						_(pkgInfo.scripts).each(function(script, name) {
							console.log('  %s', name);
							console.log('    %s', script || '-');
						});
					}

					return;
				}

				if (_(pkgInfo.scripts).has(script)) {
					console.log('> npm run %s', script);

					processUtils.execScript('npm run ' + script, {
						cwd: path.join(process.cwd(), 'package'),
						dir: process.cwd(),
						log: true
					}, this.slot());
				} else {
					throw new Error('Unknown script "' + script + '"');
				}
			},
			createErrorLogger(options.parent)
		);
	});

program.parse(process.argv);
