#!/usr/bin/env node

'use strict';

var program = require('commander'),
	npack = require('../lib/npack'),
	packageJson = require('../package.json'),
	_ = require('underscore'),
	Steppy = require('twostep').Steppy,
	read = require('read'),
	processUtils = require('../lib/utils/process'),
	logger = require('../lib/utils/logger');

program.version(packageJson.version);

// parse disabled hooks from `disableHooks` option for the commands
var parseDisabledHooks = function(disableHooks, commands) {
	var allHooks = [];
	_(commands).each(function(command) {
		allHooks.push('pre' + command, 'post' + command);
	});

	if (disableHooks) {
		if (_(disableHooks).isBoolean()) {
			return allHooks;
		} else {
			return _(disableHooks.split(',')).map(function(hook) {
				if (!_(allHooks).contains(hook)) {
					throw new Error(
						'Unknown hook: "' + hook + '"" for command ' +
						commands.join('/')
					);
				}
				return hook;
			});
		}
	}
};

program.command('install <source>')
	.alias('i')
	.description('Install new package version')
	.option(
		'-u, --user <USER[:PASSWORD]>',
		'User for basic authentication, PASSWORD will be promted if omitted'
	)
	.option(
		'-f, --force',
		'Install package even if such version is already installed'
	)
	.option('-U, --no-use', 'Prevent switching to new package')
	.option('-L, --no-log', 'Disable detailed log')
	.option('--trace', 'Show stack trace on error')
	.option(
		'-H, --disable-hooks [names]',
		'Disable all or selected hooks e.g. -H preuse,postuse'
	)
	.action(function(src, options) {
		Steppy(
			function() {
				if (options.user && options.user.indexOf(':') === -1) {
					read({
						prompt: 'Enter password for user "' + options.user + '":',
						silent: true
					}, this.slot());
				} else {
					this.pass(null);
				}
			},
			function(err, password) {
				var installOptions = _(options)
					.chain()
					.pick('force', 'log', 'use')
					.extend({
						src: src,
						dir: process.cwd(),
						disabledHooks: parseDisabledHooks(
							options.disableHooks, ['install', 'use']
						)
					})
					.value();

				if (options.user) {
					var auth = options.user + (password !== null ? (':' + password) : '');
					installOptions.auth = auth;
				}

				npack.install(installOptions, this.slot());
			},
			function(err, pkgInfo) {
				logger.log('Installed package info:');
				logger.writePkgInfo(pkgInfo, {markCurrent: true});

				this.pass(null);
			},
			logger.createErrorLogger(options)
		);
	});

var list = function(options) {
	Steppy(
		function() {
			npack.getList({dir: process.cwd()}, this.slot());
		},
		function(err, pkgInfos) {
			if (!pkgInfos.length) throw new Error('Installed packages are not found');

			logger.log('Installed packages:');
			logger.writePkgsList(pkgInfos, options);

			this.pass(null);
		},
		logger.createErrorLogger(options)
	);
};

program.command('list')
	.alias('ls')
	.description('Print list of installed packages')
	.option('-i, --info', 'Show extended info about each package')
	.option('--trace', 'Show stack trace on error')
	.action(list);

program.command('ll')
	.description('Print list with extended info, alias for "ls -i"')
	.option('--trace', 'Show stack trace on error')
	.action(function(options) {
		list(_({info: true}).extend(options));
	});

program.command('current')
	.alias('cur')
	.description('Print info about current package')
	.option('--trace', 'Show stack trace on error')
	.action(function(options) {
		Steppy(
			function() {
				npack.getCurrentInfo({dir: process.cwd()}, this.slot());
			},
			function(err, pkgInfo) {
				if (!pkgInfo) throw new Error('Current package is not set');

				logger.log('Current package info:');
				logger.writePkgInfo(pkgInfo);

				this.pass(null);
			},
			logger.createErrorLogger(options)
		);
	});

program.command('info <package>')
	.description('Print info about intalled package')
	.option('--trace', 'Show stack trace on error')
	.action(function(name, options) {
		Steppy(
			function() {
				npack.getInfo({
					name: name,
					dir: process.cwd()
				}, this.slot());
			},
			function(err, pkgInfo) {
				if (!pkgInfo) throw new Error('Package "' + name + '" is not found');

				logger.log('Package info:');
				logger.writePkgInfo(pkgInfo, {markCurrent: true});

				this.pass(null);
			},
			logger.createErrorLogger(options)
		);
	});

program.command('use <package>')
	.description('Set package as current')
	.option('-L, --no-log', 'Disable detailed log')
	.option('--trace', 'Show stack trace on error')
	.option(
		'-H, --disable-hooks [names]',
		'Disable all or selected hooks e.g. -H preuse,postuse'
	)
	.action(function(name, options) {
		Steppy(
			function() {
				var useOptions = _(options)
					.chain()
					.pick('log')
					.extend({
						name: name,
						dir: process.cwd(),
						disabledHooks: parseDisabledHooks(
							options.disableHooks, ['use']
						)
					})
					.value();

				npack.use(useOptions, this.slot());
			},
			function(err, pkgInfo) {
				logger.log('Current package info:');
				logger.writePkgInfo(pkgInfo);

				this.pass(null);
			},
			logger.createErrorLogger(options)
		);
	});

program.command('uninstall <package>')
	.alias('remove')
	.alias('rm')
	.description('Uninstall package')
	.option('-L, --no-log', 'Disable detailed log')
	.option('--trace', 'Show stack trace on error')
	.option(
		'-H, --disable-hooks [names]',
		'Disable all or selected hooks e.g. -H preuse,postuse'
	)
	.action(function(name, options) {
		Steppy(
			function() {
				var uninstallOptions = _(options)
					.chain()
					.pick('log')
					.extend({
						name: name,
						dir: process.cwd(),
						disabledHooks: parseDisabledHooks(
							options.disableHooks, ['uninstall']
						)
					})
					.value();

				npack.uninstall(uninstallOptions, this.slot());
			},
			logger.createErrorLogger(options)
		);
	});

program.command('clean')
	.description('Uninstall all packages except current')
	.option('-L, --no-log', 'Disable detailed log')
	.option('--trace', 'Show stack trace on error')
	.action(function(options) {
		Steppy(
			function() {
				var cleanOptions = _(options)
					.chain()
					.pick('log')
					.extend({dir: process.cwd()})
					.value();

				npack.clean(cleanOptions, this.slot());
			},
			logger.createErrorLogger(options)
		);
	});

program.command('run [script]')
	.description('Execute "npm run" task from current package')
	.option('-L, --no-log', 'Disable detailed log')
	.option('--trace', 'Show stack trace on error')
	.action(function(script, options) {
		Steppy(
			function() {
				npack.getCurrentInfo({dir: process.cwd()}, this.slot());
			},
			function(err, pkgInfo) {
				if (!pkgInfo) throw new Error('Current package is not set');

				if (!script) {
					if (_(pkgInfo.scripts).isEmpty()) {
						throw new Error('Scripts list is not found');
					} else {
						logger.log('Scripts list for current package:');
						logger.writeScriptsList(pkgInfo.scripts);
					}

					return;
				}

				if (_(pkgInfo.scripts).has(script)) {
					logger.log('Execute script "npm run %s"', script);

					processUtils.execScript('npm run --silent ' + script, {
						cwd: pkgInfo.path,
						dir: process.cwd(),
						log: options.log
					}, this.slot());
				} else {
					throw new Error('Unknown script "' + script + '"');
				}
			},
			logger.createErrorLogger(options)
		);
	});

program
	.command('*')
	.action(function(name) {
		logger.createErrorLogger({})(new Error('Unknown command "' + name + '"'));
	});

program.parse(process.argv);

// show help when no args
if (!process.argv.slice(2).length) {
	program.outputHelp();
}
