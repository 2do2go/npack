#!/usr/bin/env node

'use strict';

var program = require('commander'),
	npack = require('../lib/npack'),
	packageJson = require('../package.json'),
	_ = require('underscore'),
	Steppy = require('twostep').Steppy,
	colors = require('colors/safe'),
	read = require('read');

var createErrorLogger = function(options) {
	return function(err) {
		if (err) {
			if (options.trace) {
				console.error(colors.red(err.stack));
			} else {
				console.error(colors.red('Error: %s'), err.message);
			}
		}
	};
};

var printPkgInfo = function(pkgInfo, options) {
	options = _({}).defaults(options, {
		markCurrent: false,
		spaces: 2
	});

	var spacesStr = (new Array(options.spaces + 1)).join(' ');

	if (options.markCurrent && pkgInfo.current) {
		console.log(
			colors.green(spacesStr + 'name:        %s [*current]'),
			pkgInfo.name
		);
	} else {
		console.log(spacesStr + 'name:        %s', pkgInfo.name);
	}

	console.log(spacesStr + 'path:        %s', pkgInfo.path);

	if (pkgInfo.npm) {
		console.log(spacesStr + 'npm name:    %s', pkgInfo.npm.name);
		console.log(spacesStr + 'npm version: %s', pkgInfo.npm.version);
	}

	if (!_(pkgInfo.hooks).isEmpty()) {
		console.log(spacesStr + 'hooks:');

		_(pkgInfo.hooks).each(function(action, hook) {
			console.log(spacesStr + '  %s: %s', hook, action);
		});
	}
};

var printPkgsList = function(options) {
	Steppy(
		function() {
			npack.getList({dir: process.cwd()}, this.slot());
		},
		function(err, pkgInfos) {
			if (pkgInfos.length) {
				console.log('Installed packages:');

				_(pkgInfos).each(function(pkgInfo, index) {
					if (options.info && index ) console.log('');

					var str = '  ' + pkgInfo.name;

					if (pkgInfo.npm) {
						str += ' (' + pkgInfo.npm.name + ' ' + pkgInfo.npm.version + ')';
					}

					if (pkgInfo.current) {
						str += ' [*current]';

						str = colors.green(str);
					}

					console.log(str);

					if (options.info) {
						printPkgInfo(pkgInfo, {spaces: 4});
					}
				});
			} else {
				console.log('Installed packages are not found');
			}

			this.pass(null);
		},
		createErrorLogger(options.parent)
	);
};

program
	.version(packageJson.version)
	.option('--trace', 'Show stack trace on error');

program.command('install <source>')
	.alias('i')
	.description('Install new package')
	.option(
		'-u, --user <USER[:PASSWORD]>',
		'User for basic authentication, PASSWORD will be promted if omitted'
	)
	.option(
		'-f, --force',
		'Install package even if such version is already installed'
	)
	.option('-l, --log', 'Show detailed log')
	.action(function(src, options) {
		Steppy(
			function() {
				if (options.user && options.user.indexOf(':') === -1) {
					read({
						prompt: 'Enter password for user "' + options.user + '":',
						silent: true
					}, this.slot());
				} else {
					this.pass(null);
				}
			},
			function(err, password) {
				var installOptions = _(options)
					.chain()
					.pick('force', 'log')
					.extend({
						src: src,
						dir: process.cwd()
					})
					.value();

				if (options.user) {
					var auth = options.user + (password !== null ? (':' + password) : '');
					installOptions.auth = auth;
				}

				console.log('Install new package from "%s"', src);

				npack.install(installOptions, this.slot());
			},
			function(err, pkgInfo) {
				console.log(colors.green('Done'));

				console.log('\nInstalled package info:');
				printPkgInfo(pkgInfo, {markCurrent: true});

				this.pass(null);
			},
			createErrorLogger(options.parent)
		);
	});

program.command('list')
	.alias('ls')
	.description('Print list of installed packages')
	.option('-i, --info', 'Show extended info about each package')
	.action(printPkgsList);

program.command('ll')
	.description('Print list with extended info, alias for "ls -i"')
	.action(function(options) {
		printPkgsList(_({info: true}).extend(options));
	});

program.command('current')
	.alias('cur')
	.description('Print info about current package')
	.action(function(options) {
		Steppy(
			function() {
				console.log('Current package info:');

				npack.getCurrentInfo({dir: process.cwd()}, this.slot());
			},
			function(err, pkgInfo) {
				if (pkgInfo) {
					printPkgInfo(pkgInfo);
				} else {
					console.log('Current package is not set');
				}

				this.pass(null);
			},
			createErrorLogger(options.parent)
		);
	});

program.command('info <package>')
	.description('Print info about intalled package')
	.action(function(name, options) {
		Steppy(
			function() {
				console.log('Package info:');

				npack.getInfo({
					name: name,
					dir: process.cwd()
				}, this.slot());
			},
			function(err, pkgInfo) {
				printPkgInfo(pkgInfo, {markCurrent: true});

				this.pass(null);
			},
			createErrorLogger(options.parent)
		);
	});

program.command('use <package>')
	.description('Set package as current')
	.option('-l, --log', 'Show detailed log')
	.action(function(name, options) {
		Steppy(
			function() {
				console.log('Set "%s" as current package', name);

				var useOptions = _(options)
					.chain()
					.pick('log')
					.extend({
						name: name,
						dir: process.cwd()
					})
					.value();

				npack.use(useOptions, this.slot());
			},
			function() {
				console.log(colors.green('Done'));

				this.pass(null);
			},
			createErrorLogger(options.parent)
		);
	});

program.command('uninstall <package>')
	.alias('remove')
	.alias('rm')
	.description('Uninstall package')
	.option('-l, --log', 'Show detailed log')
	.action(function(name, options) {
		Steppy(
			function() {
				console.log('Uninstall package "%s"', name);

				var uninstallOptions = _(options)
					.chain()
					.pick('log')
					.extend({
						name: name,
						dir: process.cwd()
					})
					.value();

				npack.uninstall(uninstallOptions, this.slot());
			},
			function() {
				console.log(colors.green('Done'));

				this.pass(null);
			},
			createErrorLogger(options.parent)
		);
	});

program.command('clean')
	.description('Uninstall all packages except current')
	.option('-l, --log', 'Show detailed log')
	.action(function(options) {
		Steppy(
			function() {
				console.log('Clean inactive packages');

				var cleanOptions = _(options)
					.chain()
					.pick('log')
					.extend({dir: process.cwd()})
					.value();

				npack.clean(cleanOptions, this.slot());
			},
			function() {
				console.log(colors.green('Done'));

				this.pass(null);
			},
			createErrorLogger(options.parent)
		);
	});

program.parse(process.argv);
